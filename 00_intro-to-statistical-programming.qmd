---
title: "Intro to R: A hands-on tutorial"
title-slide-attributes:
  data-background-color: "#1696d2"
author: ""
format: 
  revealjs:
    fig-align: "center"    
    incremental: true
    reveal_options: true
    slide-number: true
    show-slide-number: print
    preview-links: true 
execute: 
  echo: false
  message: false
  warning: false
include-in-header:
  - text: |
      <style>
      #title-slide .title {
        color: #ffffff;
      }
      </style> 
---

```{r setup, echo = FALSE, warning = FALSE, message = FALSE}
library(knitr)
library(here)
```

## Day 0: Intro to statistical programming

Ajjit Narayanan (but really shamelessly copied and pasted from the Urban Institute)

```{r logo, out.width = "50%"}
#| fig-align: "center"

knitr::include_graphics(here("www", "images", "Rlogo.png"))
```


# <font color="#ffffff">Statistical Programming</font> {data-background=#1696d2}

## Motivation: why statistical programming?

1) Clearly answer questions
2) Clearly communicate the answer to questions
3) Document the steps to answering questions

## Example 1

What is 2 + 2?

## Example 1

What is 2 + 2?

```{r, echo = TRUE}
2 + 2
```

## Example 2

What is the median household income of Multifamily Assisted Housing properties with an above 50% Hispanic population?

## Example 2

What is the median household income of Multifamily Assisted Housing properties with an above 50% Hispanic population?

```{r, echo = TRUE}
library(sf)
library(tidyverse)

mf_properties = read_sf("https://services.arcgis.com/VTyQ9soqVukalItT/arcgis/rest/services/MULTIFAMILY_PROPERTIES_ASSISTED/FeatureServer/7/query?outFields=HH_INCOME,PCT_HISPANIC&where=1%3D1&f=geojson", 
                        quiet= TRUE)

 mf_properties %>% 
   filter(PCT_HISPANIC >50) %>%
   summarize(median_hh_income = median(HH_INCOME)) %>% 
   st_drop_geometry()
```

## Example 3

How would changing the residential preference areas for the DC Housing Authority potentially affect the racial composition of HCV holders?

## Example 3

How would changing the residential preference areas for the DC Housing Authority potentially affect the racial composition of HCV holders?

```{r out.width = "50%"}
#| fig-align: "center"

knitr::include_graphics("www/images/out-of-sync.gif")
```

<small>Via [die-seite-des-dr-caligari](http://die-seite-des-dr-caligari.tumblr.com/post/102115497897)</small>

# <font color="#ffffff">Do cool stuff</font> {data-background=#1696d2}

## Data Visualizations

```{r out.width = "30%"}
#| fig-align: "left"

include_graphics(here("www","images","violin-plots.png"))

```

```{r out.width = "30%"}
#| fig-align: "center"

include_graphics(here("www","images","line-graph.png"))

```

```{r out.width = "30%"}
#| fig-align: "right"
include_graphics(here("www","images","hex-plot.png"))

```

## Interactive maps

```{r out.width = "50%"}
#| fig-align: "center"

include_graphics(here("www","images","interactive-map-slider.png"))
```

## Dashboards

```{r out.width = "50%"}
#| fig-align: "center"

include_graphics(here("www","images","quarto-dashboard.png"))
```

## Automation

```{r out.width = "50%"}
#| fig-align: "center"

include_graphics("www/images/factsheets.png")
```

## Factsheets

```{r out.width = "50%"}
#| fig-align: "center"

include_graphics("www/images/factsheet_template.png")
```





## R packages

```{r out.width = "50%"}
#| fig-align: "center"

include_graphics("www/images/educationdata.png")
```

# <font color="#ffffff">Six principles</font> {data-background=#1696d2}

## 1) Accuracy

Deliberate steps **should** be taken to minimize the chance of making an error and maximize the chance of catching errors when errors inevitably occur. 

## 2) Computational reproducibility

Computational reproducibility **should** be embraced to improve accuracy, promote transparency, and prove the quality of analytic work. 

## Computational reproducibility

* <font color="#1696d2">Replication:</font> the recreation of findings across repeated studies, is a cornerstone of science
* <font color="#1696d2">Reproducibility:</font> the ability to access data, source code, tools, and documentation and recreate all calculations, visualizations, and artifacts of an analysis

* *Computational reproducibility should be the minimum standard for computational social sciences and statistical programming*

## 3) Human interpretability

Code **should** be written so humans can easily understand what’s happening—even if it occasionally sacrifices machine performance.

## 4) Portability

Analyses **should** be designed so strangers can understand each and every step without additional instruction or inquiry from the original analyst. 

## 5) Accessibility

Research and data are public goods that **should** be widely and easily shared. Decisions about tools, methods, data, and language during the research process **should** be made in ways that promote the ability of anyone and everyone to access an analysis. 

## 6) Efficiency

Analysts **should** seek to make all parts of the research process more efficient with clear communication, by adopting best practices, and by managing computation. 

## Principles

> 1) Accuracy
> 2) Computational reproducibility
> 3) Human interpretability
> 4) Portability
> 5) Accessibility
> 6) Efficiency

# <font color="#ffffff">Fundamental concepts</font> {data-background=#1696d2}

## Text editor/IDE

```{r out.width = "60%"}
#| fig-align: "center"

knitr::include_graphics("www/images/rstudio.png")
```

* R = free, open source programming language = The engine
* RStudio = for-profit company and Integrated Development Environment (IDE) = The steering wheel/car

## RStudio

```{r out.width = "30%"}
#| fig-align: "center"

knitr::include_graphics("www/images/rstudio.svg")
```

## The R console

```{r out.width = "60%"}
#| fig-align: "center"

knitr::include_graphics("www/images/rstudio-console.png")
```

## Script

```{r out.width = "60%"}
#| fig-align: "center"

knitr::include_graphics("www/images/rstudio-script.png")
```

* A plain text document that contains code and comments
* **Map to the answer**
* `.R` and `.qmd` (`.Rmd` is older)

## Comments

```{r echo = TRUE, eval = FALSE}
# This library contains bad_drivers dataset
library(fivethirtyeight)

# increase perc_speeding because of systematic underreporting
mutate(bad_drivers, perc_speeding = perc_speeding * 1.2)
```

* Clear code avoids the need for describing **<font color="#1696d2">"what"</font>**
* Comments should focus on **<font color="#1696d2">"why"</font>**

## Coding style

*"Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread."* ~ Hadley Wickham

* CamelCase
* camelCase
* snake_case

[tidyverse style guide](https://style.tidyverse.org/)

## R Packages

Collections of R, C, C++, and FORTRAN code that expand the functionality of R. 

```{r out.width = "40%"}
#| fig-align: "center"

library(tidycensus)
library(mapview)

vermont_medincome <- get_acs(geography = "county", 
              variables = c(medincome = "B19013_001"), 
              state = "VT", 
              year = 2021)
head(vermont_medincome)
```

## Comprehensive R Archive Network

* CRAN was introduced in 1997. 
* Repository of popular R packages with basic standards and quality control. 

## tidyverse {data-background=#fdeba4}

```{r out.width = "30%"}
#| fig-align: "center"

knitr::include_graphics("www/images/tidyverse.png")
```

Comprehensive set of tools for data science

Core: ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, forcats

## tidyverse {data-background=#fdeba4}

```{r out.width = "30%"}
#| fig-align: "center"

knitr::include_graphics("www/images/r4ds.png")
```

[Free text](https://r4ds.had.co.nz/) by Hadley Wickham and Garrett Grolemund

## Installing and loading packages

```{r eval = FALSE, echo = TRUE}
# run only once ever(ish) and don't include in scripts
install.packages("tidyverse")
```

```{r eval = FALSE, echo = TRUE}
# include at the top of scripts and run once per session
library(tidyverse)
```

## Data structures

<font color="#1696d2">Scalars (do not exist in R)</font>

<font color="#1696d2">Vectors</font>
```{r eval = TRUE, echo = FALSE}
c(1, 2, 3, 4, 5)
```

<font color="#1696d2">Matrices</font>

```{r eval = TRUE, echo = FALSE}
matrix(c(1:2, 3:4, 5:6), nrow = 2)
```

<font color="#1696d2">Data frames, multidimensional arrays</font>

```{r eval = TRUE, echo = FALSE}
msleep %>%
  select(name, awake, brainwt, bodywt) %>%
  head(n = 4)
```

## Data types

<font color="#1696d2">Character</font>

```{r eval = TRUE, echo = FALSE}
c("a", "b", "c", "d", "e")
```

<font color="#1696d2">Numeric</font>

```{r eval = TRUE, echo = FALSE}
c(1, 2, 3, 4, 5)
```

<font color="#1696d2">Logical</font>

```{r eval = TRUE, echo = FALSE}
c(TRUE, TRUE, FALSE, TRUE, FALSE)
```

<font color="#1696d2">Factor</font>

```{r eval = TRUE, echo = FALSE}
factor(c("good", "ok", "bad", "ok", "ok"), levels = c("good", "ok", "bad"))
```

## Missing values

* `NA` is R's encoding for missing values 
* Missing values are contagious

```{r echo = TRUE}
mean(c(1, 2, 3, 4, NA))
```

## Assignment

R can hold many different objects at the same time. Storing the consequence of code requires assignment (`<-`).

```{r echo = TRUE}
a <- 2
b <- 2

a + b

c <- a + b
c
```

## Functions

Arguments by position

```{r echo = TRUE}
mean(c(1, 2, 3, 4, NA), 0.2, TRUE)
```

Arguments by name

```{r echo = TRUE}
mean(x = c(1, 2, 3, 4, NA), trim = 0.2, na.rm = TRUE)
```

Function documentation

`?mean`

## Custom functions

Rule of three: never program something three or more times

```{r echo = TRUE}
test_oddness <- function(x) {
  ifelse(test = x %% 2 == 0, yes = "even!", no = "odd!")
}

test_oddness(1:10)
```

## Tests

What will it take to convince you that your code is correct?

1) Assign monthly observations to fiscal years
  * <font color="#1696d2">Are there 12 months per year?</font>
2) Link observations from 2017 to observations from 2018.
  * <font color="#1696d2">Do non-matching variables that shouldn't change change?</font>
3) Tax calculator
  * <font color="#1696d2">Are values that must be positive non-positive?</font>

## Tests tips

1) Write the test first!
2) Each time you encounter a bug, write a test that will convince you the bug no longer exists.

# <font color="#ffffff">Organizing an analysis</font> {data-background=#1696d2}

## 1) Keep things together

* If possible, store data, scripts, and outputs in the same place.
* Sort document data, scripts, and outputs into sub directories with names like `data/`, `scripts/`, and `outputs/`

```{r out.width = "80%"}
#| fig-align: "center"

knitr::include_graphics("www/images/directory.png")
```

## 2) File paths

* File paths are programmatic references to the locations of files on a computer. 
* RStudio accepts `/` regardless of operating system. 
* Example: `r getwd()`

## 3) Working directories

* Code needs to be portable!
  * Use relative file paths
* Programmers can use `setwd()` to shortcut much of absolute file paths
* `.Rproj` are a superior solution only available in R
  * Never use `setwd()` in R

# <font color="#ffffff">Ways to learn a programming language</font> {data-background=#1696d2}

## Tips

1) Read R4DS
2) Attend the rest of this training
3) Find a project ASAP
4) Connect with the community
5) Use R, use it again, and then use R some more

## Schedule

# <font color="#ffffff">Software check</font> {data-background=#1696d2}

## Check R

1) Open RStudio
2) Submit `sessionInfo()`
3) Is R Version > 4.0.0?

## Check RStudio

1) In RStudio, click Help > About RStudio
2) Is the version > 1.0.0

## Install the tidyverse

1) Submit `install.packages("tidyverse")` to the console
2) Run `library(tidyverse)`


# <font color="#ffffff">A survey of other programming languages</font> {data-background=#1696d2}

## Stata

```{r out.width = "30%"}
#| fig-align: "center"

knitr::include_graphics("www/images/Stata.png")
```

* Common users: economists, Nate Silver
* Strengths: out-of-the-box econometric tools, simple syntax
* Limitations: proprietary, expensive, one data set at a time, inflexible

*Photo by StataCorp LP, CC BY-SA 4.0, Unaltered*

## SAS

```{r out.width = "30%"}
#| fig-align: "center"

knitr::include_graphics("www/images/SAS.png")
```

* Common users: veteran researchers, government
* Strengths: doesn't use memory
* Limitations: proprietary, expensive, clunky, inflexible, lacks environments, documentation

## Python

```{r out.width = "30%"}
#| fig-align: "center"

knitr::include_graphics("www/images/python.png")
```

* Users: data scientists, computer scientists
* Strengths: general purpose programming, extensibility, flexibility
* Weaknesses: steep learning curve

## R

```{r out.width = "30%"}
#| fig-align: "center"

knitr::include_graphics("www/images/Rlogo.png")
```

* Users: statisticians, data scientists/analysts
* Strengths: data viz, data wrangling, free, documentation, community
* Limitations: multiple languages in one

## Others
> * SAS
> * SQL
> * SPSS
> * Julia
> * Rust
> * JavaScript

## What you use matters less than how you use it

## ~~What you use matters less than how you use it~~ R is the best

## Comparison

```{r out.width = "60%"}
#| fig-align: "center"

knitr::include_graphics("www/images/languages.jpg")
```


